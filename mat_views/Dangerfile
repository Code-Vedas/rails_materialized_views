# frozen_string_literal: true

valid_prefixes = %w[feat/ bugfix/ docs/ release/ chore/ refactor/ test/ style/ ci/ perf/ build/]

def all_modified_files(git)
  all_added = git.added_files + git.modified_files + git.renamed_files.map { |file| file[:after] }
  all_removed = git.deleted_files + git.renamed_files.map { |file| file[:before] }
  (all_added - all_removed).uniq
end

modified_files = all_modified_files(git)

raise('üìù Please include a more detailed description of your change.') if github.pr_body.strip.length < 10

if github.branch_for_head && valid_prefixes.none? { |prefix| github.branch_for_head.start_with?(prefix) }
  raise("‚ö†Ô∏è PR branch name should start with one of: #{valid_prefixes.join(', ')}")
end

# pr title should match with prefix minus / and colon
if github.pr_title && valid_prefixes.none? { |prefix| github.pr_title.start_with?("#{prefix.delete_suffix('/')}:") }
  raise("‚ö†Ô∏è PR title should start with one of: #{valid_prefixes.map { |p| "#{p.delete_suffix('/')}:" }.join(', ')}")
end

if modified_files.include?('Gemfile') && !modified_files.include?('Gemfile.lock')
  raise('üì¶ Gemfile changed but Gemfile.lock did not. Did you forget to run bundle install?')
end

modified_files.each do |f|
  diff = git.diff_for_file(f)
  debug_statements = ['binding.pry', 'binding.b', 'byebug', 'debugger']
  if f.end_with?('.rb') && diff && debug_statements.any? { |stmt| diff.patch.include?(stmt) }
    raise("üö´ Do not commit debugging statements like binding.pry, binding.b, byebug, or debugger!. Found in #{f}")
  end

  raise("üßπ Remove temporary or system files like #{f}.") if f.end_with?('.swp', '.DS_Store')
end

if github.branch_for_head&.start_with?('release/')
  changelog_modified = modified_files.include?('CHANGELOG.md')
  raise('üö® CHANGELOG.md must be updated in a release branch.') unless changelog_modified
end

unless modified_files.grep(/\.rb$/).empty?
  test_files = modified_files.grep(%r{spec/|test/})
  warn('‚ö†Ô∏è No tests/specs modified. Please ensure tests are updated for any Ruby code changes.') if test_files.empty?
end

if violation_report[:errors].any? || violation_report[:warnings].any?
  message = <<~MSG
    ---
    ‚ö†Ô∏è You got #{violation_report[:errors].count} error(s) and #{violation_report[:warnings].count} warning(s) in your PR.
    üîß **How to fix and re-trigger:**
    Please address the above issues and push your changes. The checks will automatically re-run on each push.
    If you want to manually re-run the checks on GitHub, you can do so from the "Actions" tab or the "Checks" section of this PR.
  MSG

  markdown(message)
end

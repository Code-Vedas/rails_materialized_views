---
en-LOL:
  activerecord:
    attributes:
      mat_views/mat_view_definition:
        created_at: MADE AT
        dependencies: FRIENDZ IT NEEDZ
        last_run_at: LAST RUNNED
        name: NAEM
        refresh_strategy: REFRESH PLAN
        schedule_cron: SCHEDUL (cron)
        sql: SQL (SELECT ... LOL)
        unique_index_columns: ONE-OF-A-KIND COLUMNZ
        updated_at: UPDATED
      mat_views/mat_view_run:
        created_at: MADE AT
        details: DETAILZ
        duration_ms: HOW LONG (ms)
        error: OOPS
        finished_at: FINISHED
        mat_view_definition: DEFINITION
        meta: EXTRA STUFF
        operation: ACTION
        row_count_after: ROWZ AFTER
        row_count_before: ROWZ BEFORE
        rows_before_after: ROWZ (BEFORE/AFTER)
        started_at: STARTED
        status: STATUS
        updated_at: UPDATED
    enums:
      mat_views/mat_view_definition:
        refresh_strategy:
          concurrent: ALL AT ONCE, KTHX
          regular: REGULAR
          swap: SWAPPA
      mat_views/mat_view_run:
        operation:
          create: MAKE
          drop: DROP
          refresh: REFRESH
        status:
          failed: FAILED :-(
          running: RUNNIN
          success: AWESOME WIN
    errors:
      models:
        mat_views/mat_view_definition:
          attributes:
            name:
              blank: HAZ TO BE THERE
              invalid: IZ NOT A LEGIT PostgreSQL NAME
              taken: ALREDY STOLED
            sql:
              blank: HAZ TO BE THERE
              invalid: HAZ TO START WIF SELECT
            unique_index_columns:
              at_least_one: NEEDS AT LEAST 1 COLUMN WHEN U DOIN CONCURRENT REFRESH
    hints:
      mat_views/mat_view_definition:
        dependencies: Comma list of tablez or viewz dis materialized view needz, kthx.
        name: Wut we call dis materialized view in teh database.
        refresh_strategy: How dis materialized view gets a make-over.
        schedule_cron: Use normal cron speak. Leave blank if u haz no schedul.
        sql: SQL haz to be a real SELECT sentence.
        unique_index_columns: Columnz that get teh special index. Needed for concurrent
          refresh.
      mat_views/mat_view_run:
        error: Message when teh run derps.
        meta: Extra info in JSON.
        operation: Wut kind of action ran.
        status: Current mood of teh run.
    models:
      mat_views/mat_view_definition: Materialized View Definition
      mat_views/mat_view_run: Materialized View Run
    placeholders:
      mat_views/mat_view_definition:
        dependencies: Type friendz (comma optional)
        name: Type naem
        refresh_strategy: Pick refresh plan
        schedule_cron: 0 0 * * * = midnight ebery day, blank if no schedul
        sql: Type SQL (SELECT ... LOL)
        unique_index_columns: Type special columnz (comma optional)
      mat_views/mat_view_run:
        error: OOPS message
        mat_view_definition: Pick materialized view
        meta: Extra stuff (JSON)
        operation: Pick action
        status: Pick status
  i18n:
    name: English (LOLCAT)
  mat_views:
    actions: DO STUFF
    cancel: NUH UH
    close: CLOSE
    close_window: CLOSE WINDOW
    create: MAKE
    dashboard:
      metrics:
        title: STATZ
      title: DASHBOARD
    datatable:
      clear_search_aria_label: CLEAR TEH SEARCH
      search_aria_label: SEARCH TEH TABLE
      search_placeholder: LOOK FUR...
    definition: DEFINITION
    definitions: DEFINITIONZ
    delete: DELETE
    details: DETAILZ
    edit: EDIT
    edit_var: EDIT %{name}
    errors:
      frame_only: Dis only werkz in a frame, so go back to dashboard kthx.
      prevented_saving:
        few: "%{count} boo-booz stopped teh save:"
        many: "%{count} boo-booz stopped teh save:"
        one: '1 boo-boo stopped teh save:'
        other: "%{count} boo-booz stopped teh save:"
        two: '2 boo-booz stopped teh save:'
        zero: NO BOO-BOOZ, YAY!
    filter_by: 'FILTER BY:'
    footer:
      copyright: "© %{year} %{company} All rights reserved."
      documentation: DOCZ
      need_help: Need uptime promise & expert hoomans?
      open_issue: OPEN ISSUE
      project_homepage: PROJECT HOME
      support: GET PRO SUPPORT →
      tagline: Made wif ❤️ by devs for devs.
      tooltip:
        documentation: Read teh docz
        gem_version: Visit RubyGems page
        open_issue: Report bug or ask fur feature
        project_homepage: GitHub repo
        support: Pro support planz
      version: v%{version}
    header:
      signed_in_as: U signed in as %{email}
    history: HISTORY
    loading: LOADING...
    loading_definitions: Loading definitions...
    loading_runs: Loading runz...
    mat_view_definition:
      create_mv: MAKE MatViews
      create_mv_tooltip: Makes teh materialized view in teh database, kthx.
      delete_confirm: Delete %{name} definition? (MatViews stays put)
      delete_tooltip: Deletes definition but no drop teh materialized view.
      drop_mv: DROP MatViews
      drop_mv_cascade: DROP MatViews (ALL TEH THINGZ)
      drop_mv_cascade_confirm: Drop materialized view and all its buddy objects for
        %{name}?
      drop_mv_cascade_tooltip: Drops materialized view and every dependent friend
        in teh database. Definition stays.
      drop_mv_confirm: Drop materialized view for %{name}?
      drop_mv_tooltip: Drops materialized view from teh database. Definition stays.
      edit_tooltip: Edit materialized view definition.
      materialized_view: Materialized view
      materialized_view_exists: Materialized view iz here
      materialized_view_not_exists: Materialized view not born yet!
      new_definition: New definition
      new_definition_tooltip: Make fresh materialized view definition.
      no_definitions: No materialized view definitions found. Make one plz.
      no_definitions_if_filtered: Nuthin matched dat filter or search.
      refresh_tooltip: Refreshes teh materialized view in database.
      sql_summary_tooltip: Click to show/hide SQL
      view_tooltip: Look at materialized view definition.
    mat_view_run:
      error_tooltip: Message if run derps.
      meta_tooltip: Extra info in JSON.
      no_runs: No runz here.
      no_runs_if_filtered: Filters got zero runz.
      view_details: See detailz
      view_tooltip: See run detailz.
    no_filter: ANYTHING
    no_value: NO VALUE (nil or blank)
    per_page: Per page
    project_author: CodeVedas Inc.
    project_description: Admin interface fur managing PostgreSQL materialized viewz
      in Rails apps.
    project_tags: rails, ruby, materialized views, admin, dashboard, ui, interface,
      management
    refresh: REFRESH
    refresh_contents: REFRESH STUFF
    reloading: Reloadin...
    reset: RESET
    run: RUN
    runs: RUNZ
    save_changes: SAVE CHANGEZ
    settings:
      auto: AUTO
      dark: DARK
      language: LANGUAGE
      language_hint: Pick ur interface lingo.
      light: LIGHT
      theme: THEME
      theme_hint: Auto followz ur system, light/dark override it.
      title: PREFERENCES
    title: MatViews LOL
    view_var: VIEW %{name}
    x_miliseconds: "%{count} ms"
  number:
    format:
      delimiter: ","
      separator: "."
  numbers:
    eight: 8
    five: 5
    four: 4
    nine: 9
    one: 1
    seven: 7
    six: 6
    three: 3
    two: 2
    zero: 0
  time:
    am: AM
    formats:
      datetime12hour: "%Y-%m-%d %I:%M:%S %p"
    pm: PM
